{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"$loca",
				"$location	AngularJS"
			],
			[
				"loc",
				"locationInfo"
			],
			[
				"cons",
				"console"
			],
			[
				"new",
				"newInfo"
			],
			[
				"ion",
				"ion-card	ion-card"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "angular.module('weather.controllers', [])\n\n.controller('AppCtrl', function($scope, $ionicModal, $timeout) {\n\n  // With the new view caching in Ionic, Controllers are only called\n  // when they are recreated or on app start, instead of every page change.\n  // To listen for when this page is active (for example, to refresh data),\n  // listen for the $ionicView.enter event:\n  //$scope.$on('$ionicView.enter', function(e) {\n  //});\n\n  // Form data for the login modal\n  $scope.loginData = {};\n\n  // Create the login modal that we will use later\n  $ionicModal.fromTemplateUrl('templates/login.html', {\n    id: '1',\n    scope: $scope,\n    animation: 'slide-in-up'\n  }).then(function(modal) {\n    $scope.modal = modal;\n  });\n\n  //addLocation modal\n  $ionicModal.fromTemplateUrl('templates/addLocation.html', {\n    id: '0',\n    scope: $scope,\n    animation: 'slide-in-up'\n  }).then(function(modal){\n    $scope.addLocationModal = modal;\n  });\n\n\n  // Triggered in the login modal to close it\n  $scope.closeModal = function() {\n    $scope.modal.hide();\n    if($scope.addLocationModal){\n      $scope.addLocationModal.hide();\n    }\n  };\n\n\n  // Open the login modal\n  $scope.login = function() {\n    $scope.modal.show();\n  };\n\n  //open any modal by id\n /* $scope.openModal = function(index){\n    if(index == 1) $scope.modal.show();\n    else $scope.addLocationModal.show();\n\n  };*/\n\n  $scope.addLocation = function(){\n      $scope.addLocationModal.show();\n  };\n\n  // Perform the login action when the user submits the login form\n  $scope.doLogin = function() {\n    console.log('Doing login', $scope.loginData);\n\n    // Simulate a login delay. Remove this and replace with your login\n    // code if using a login system\n    $timeout(function() {\n      $scope.closeLogin();\n    }, 1000);\n  };\n\n\n\n})\n\n\n.controller('GetLocationCtrl', function($scope, $http, $state){\n  $scope.locationInfo = {};\n  $scope.searchInfo = {};\n\n  var reset = function(){\n    if($scope.locationInfo){\n      $scope.locationInfo = null;\n            console.log($scope.locationInfo);\n\n    } \n  };\n\n  $scope.findZip = function(){\n    var owmUrl = \"http://api.openweathermap.org/data/2.5/forecast\";\n\n    $http({\n      method:'GET',\n      url: owmUrl,\n      params: {zip:$scope.searchInfo.zip}\n    }).then(function(response){\n      $scope.locationInfo = response.data;\n      if($scope.locationInfo.cod == \"404\"){\n        $scope.error = \"Can't find that zip code!\";\n        console.log($scope.error);\n      }\n      else if ($scope.locationInfo.cod = \"200\"){\n        $scope.error = false;\n\n        var workaround = 1;\n        $scope.$watch('searchInfo.zip', function(){\n          workaround --;\n          if(workaround < 0){\n            reset();\n          }\n        });\n\n      }\n      /*else if ($scope.locationInfo.cod == \"200\"){\n        alert('works!');\n      }*/\n    }, function(){\n      alert('no go');\n    });\n\n  };\n\n  $scope.goToLocation = function(){\n    $state.go('app.browse');\n    \n  }\n\n/*  $http.get(owmUrl,{params:{'zip': $scope.searchInfo.zip}})\n  .success(function(data){\n    $scope.locationInfo = data; \n  });\n*/\n})\n\n\n.controller('forecastViewCtrl', function($scope){\n  $scope.locations = [\n    { id:1, zip:'84663' },\n    { id:2, zip:'91775' },\n    { id:3, zip:'84606' }\n\n  ];\n\n})\n\n\n.controller('PlaylistsCtrl', function($scope) {\n  $scope.playlists = [\n    { title: 'Reggae', id: 1 },\n    { title: 'Chill', id: 2 },\n    { title: 'Dubstep', id: 3 },\n    { title: 'Indie', id: 4 },\n    { title: 'Rap', id: 5 },\n    { title: 'Cowbell', id: 6 }\n  ];\n})\n\n.controller('PlaylistCtrl', function($scope, $stateParams) {\n});\n",
			"file": "www/js/controllers.js",
			"file_size": 3759,
			"file_write_time": 130838275674620415,
			"settings":
			{
				"buffer_size": 3583,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/js/app.js",
			"settings":
			{
				"buffer_size": 2132,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/index.html",
			"settings":
			{
				"buffer_size": 928,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/templates/playlist.html",
			"settings":
			{
				"buffer_size": 100,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/templates/playlists.html",
			"settings":
			{
				"buffer_size": 245,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/templates/menu.html",
			"settings":
			{
				"buffer_size": 1164,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/templates/addLocation.html",
			"settings":
			{
				"buffer_size": 1415,
				"line_ending": "Windows"
			}
		},
		{
			"file": "www/templates/browse.html",
			"settings":
			{
				"buffer_size": 96,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 512.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/user/ionic/weather",
		"/C/Users/user/ionic/weather/hooks",
		"/C/Users/user/ionic/weather/www",
		"/C/Users/user/ionic/weather/www/js",
		"/C/Users/user/ionic/weather/www/templates"
	],
	"file_history":
	[
		"/C/Users/user/ionic/weather/ionic.project",
		"/C/Users/user/ionic/weather/www/templates/login.html",
		"/C/Users/user/ionic/weather/www/lib/angular-ui-validate/README.md",
		"/C/Users/user/ionic/weather/www/js/app.js",
		"/C/Users/user/ionic/weather/www/templates/playlists.html",
		"/C/Users/user/ionic/todo/www/js/app.js",
		"/C/Users/user/ionic/todo/www/index.html",
		"/C/Windows/System32/Drivers/etc/hosts"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"c:\\Users\\user\\ionic\\weather\\www",
			"c:\\users\\ionic\\weather\\www"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Starter",
			"starter",
			"search"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "www/js/controllers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3583,
						"regions":
						{
						},
						"selection":
						[
							[
								2943,
								2943
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "www/js/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2132,
						"regions":
						{
						},
						"selection":
						[
							[
								1276,
								1282
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 523.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "www/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 928,
						"regions":
						{
						},
						"selection":
						[
							[
								873,
								873
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "www/templates/playlist.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 100,
						"regions":
						{
						},
						"selection":
						[
							[
								82,
								82
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "www/templates/playlists.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 245,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "www/templates/menu.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1164,
						"regions":
						{
						},
						"selection":
						[
							[
								858,
								870
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "www/templates/addLocation.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1415,
						"regions":
						{
						},
						"selection":
						[
							[
								1021,
								1021
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 14.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "www/templates/browse.html",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 96,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.404191616766,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "weather.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
